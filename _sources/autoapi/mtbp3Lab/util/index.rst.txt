mtbp3Lab.util
=============

.. py:module:: mtbp3Lab.util


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/mtbp3Lab/util/cdt/index
   /autoapi/mtbp3Lab/util/cdtg/index
   /autoapi/mtbp3Lab/util/lsr/index


Attributes
----------

.. autoapisummary::

   mtbp3Lab.util._ROOT


Classes
-------

.. autoapisummary::

   mtbp3Lab.util.LsrTree
   mtbp3Lab.util.ListTree
   mtbp3Lab.util.catPlotter


Functions
---------

.. autoapisummary::

   mtbp3Lab.util.diff_2cols_in_1df
   mtbp3Lab.util.diff_2cols_in_2df
   mtbp3Lab.util.summarize_1nc_by_2group
   mtbp3Lab.util.get_data


Package Contents
----------------

.. py:class:: LsrTree(path='', outfmt='list', with_counts=False, count_str='', with_file_label=False, label_str='')

   .. py:attribute:: path


   .. py:attribute:: outfmt


   .. py:attribute:: with_counts


   .. py:attribute:: count_str


   .. py:method:: list_files()

      List files in the specified directory based on the output format.

      :returns: The list of files, JSON string, or DataFrame based on the output format.
      :rtype: list or str or pd.DataFrame

      .. rubric:: Examples

      >>> lsr = LsrTree("/path/to/directory", outfmt="list")
      >>> lsr.list_files()
      ['file1.txt', 'file2.txt', 'file3.txt']



   .. py:method:: list_files_json()

      List files in the specified directory and return the result as a JSON string.

      :returns: The JSON string representing the file list.
      :rtype: str



   .. py:method:: list_files_list()

      List files in the specified directory and return the result as a list.

      :returns: The list of files.
      :rtype: list



   .. py:method:: list_files_dataframe()

      List files in the specified directory and return the result as a pandas DataFrame.

      :returns: The DataFrame representing the file list.
      :rtype: pd.DataFrame



   .. py:method:: list_files_string()

      List files in the specified directory using the default output format.

      :returns: The file list as a string.
      :rtype: str



   .. py:method:: list_files_tree()

      List files in the specified directory and return the result as a tree structure.

      :returns: The tree structure representing the file list.
      :rtype: str



.. py:function:: diff_2cols_in_1df(df, col1='ARM', col2='ACTARM', keep_diff_only=False)

   Calculate the difference between two columns in a DataFrame.

   :param df: The DataFrame containing the columns to compare.
   :type df: pandas.DataFrame
   :param col1: The name of the first column to compare. Default is 'ARM'.
   :type col1: str
   :param col2: The name of the second column to compare. Default is 'ACTARM'.
   :type col2: str

   :returns: If there is a difference between the two columns,
             a DataFrame is returned with the unique combinations of values in col1 and col2,
             along with a 'diff' column indicating whether the values are different ('True') or not ('').
             If there is no difference between the two columns, the string "The two columns are the same." is returned.
   :rtype: pandas.DataFrame or str


.. py:function:: diff_2cols_in_2df(df1, df2, col, gp)

   Check if a column exists in both dataframes.

   :param df1: The first dataframe.
   :type df1: pandas.DataFrame
   :param df2: The second dataframe.
   :type df2: pandas.DataFrame
   :param col: The column to check.
   :type col: str
   :param gp: The group column.
   :type gp: str

   :returns: True if the column exists in both dataframes, False otherwise.
   :rtype: bool


.. py:function:: summarize_1nc_by_2group(df=None, column='', cutoff=None, group_col0='', group_col1='', to_cat=True)

   Create a summary dataframe that shows the percentage of NaN values and values less than a cutoff point in a numerical column.

   :param df: The input dataframe.
   :type df: pandas.DataFrame
   :param column: The name of the numerical column.
   :type column: str
   :param cutoff: The cutoff point.
   :type cutoff: float
   :param group_col0: The first group column.
   :type group_col0: str
   :param group_col1: The second group column.
   :type group_col1: str
   :param to_cat: Whether to categorize the column based on the cutoff point.
   :type to_cat: bool

   :returns: A summary dataframe with two columns: 'NaN Percentage' and 'Below Cutoff Percentage', pivoted by group_col1.
   :rtype: pandas.DataFrame

   :raises ValueError: If the input is not a DataFrame or if the column is not a string or does not exist in the DataFrame.
   :raises ValueError: If the group_col0 or group_col1 is not a string or does not exist in the DataFrame.
   :raises ValueError: If the column is not a numerical column.


.. py:class:: ListTree(lst=[], label=[], infmt='path')

   .. py:attribute:: lst


   .. py:attribute:: label


   .. py:attribute:: infmt


   .. py:attribute:: df


   .. py:attribute:: prelst


   .. py:attribute:: tree


   .. py:method:: __list_tree_df()


   .. py:method:: __list_tree_pre(to_right=False)


   .. py:method:: list_tree(to_right=False)

      Returns a DataFrame representing the tree structure of the object.

      Parameters:
      - to_right (bool): If True, aligns the tree structure to the right by padding with spaces.

      Returns:
      - tree (DataFrame): DataFrame representing the tree structure.



   .. py:method:: list_tree_with_keyword(keywords, neighbor=0, outfmt='simple')

      Search for keywords in the list of items.

      :param keywords: List of keywords to search for.
      :type keywords: list

      :returns: List of items that contain the keywords.
      :rtype: list



.. py:class:: catPlotter(df, y_col, group_col=None, grid_col=None, grid_wrap=None, x_col=None, pt_size=5, y_scale_base=0, x_scale_base=0, title='', fig_size_0=7, fig_size_1=6, point_position='swarm', x_label_rotate=None, grid_kws=None)

   A class for creating categorical box plots and strip plots.

   Parameters:
   - df (pandas.DataFrame): The input DataFrame.
   - group_col (str): The column name for grouping the data.
   - y_col (str): The column name for the y-axis variable.
   - x_col (str): The column name for the x-axis variable.
   - grid_col (str, optional): The column name for creating subplots based on a grid. Default is None.
   - grid_wrap (int, optional): The number of columns in the grid. Default is None.
   - pt_size (int, optional): The size of the points in the strip plot. Default is 5.
   - x_scale_base (int, optional): The base for the x-axis scale. Default is 10.
   - title (str, optional): The title of the plot. Default is an empty string.
   - fig_size_0 (int, optional): The width of the figure. Default is 7.
   - fig_size_1 (int, optional): The height of the figure. Default is 6.
   - grid_kws (dict, optional): Additional keyword arguments for the FacetGrid. Default is None.

   Methods:
   - update_parameters(**kwargs): Update the parameters of the catPlotter instance.
   - boxplot(): Create a categorical box plot and strip plot.
   - lineplot(): Create a line plot by categorical group_col on the x-axis with grid option.
   - generate_example_dataset(): Generate an example dataset.

   Raises:
   - ValueError: If an invalid parameter is provided or if group_col, x_col, or y_col is not found in DataFrame columns.


   .. py:attribute:: df


   .. py:attribute:: grid_col


   .. py:attribute:: point_position


   .. py:attribute:: grid_wrap


   .. py:attribute:: group_col


   .. py:attribute:: y_col


   .. py:attribute:: x_col


   .. py:attribute:: pt_size


   .. py:attribute:: x_scale_base


   .. py:attribute:: y_scale_base


   .. py:attribute:: title


   .. py:attribute:: fig_size_0


   .. py:attribute:: fig_size_1


   .. py:attribute:: x_label_rotate


   .. py:attribute:: grid_kws


   .. py:method:: update_parameters(**kwargs)

      Update the parameters.

      Parameters:
      - kwargs (dict): The keyword arguments to update the parameters.

      Raises:
      - ValueError: If an invalid parameter is provided.



   .. py:method:: boxplot()

      Create a categorical box plot and strip plot.

      Raises:
      - ValueError: If group_col or y_col is not found in DataFrame columns.



   .. py:method:: generate_example_dataset()
      :staticmethod:


      Generate an example dataset.

      :returns: The example dataset.
      :rtype: pandas.DataFrame



   .. py:method:: lineplot()

      Create a line plot by categorical group_col on the x-axis with grid option.

      Raises:
      - ValueError: If group_col or y_col is not found in DataFrame columns.



.. py:data:: _ROOT

.. py:function:: get_data(path)

